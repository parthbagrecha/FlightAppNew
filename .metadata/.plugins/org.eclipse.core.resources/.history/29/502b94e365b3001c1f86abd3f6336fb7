package com.flightapp.controller;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.flightapp.feignclients.AuthService;
import com.flightapp.model.BookingInputModel;
import com.flightapp.model.PassengerDetails;
import com.flightapp.model.Ticket;
import com.flightapp.service.BookingService;

@ExtendWith(MockitoExtension.class)
public class BookingControllerTest {

	@InjectMocks
	BookingController bookingController;

	@Mock
	BookingService bookingService;

	@Mock
	AuthService authService;

	@Test
	void testCreateBooking() throws Exception {
		PassengerDetails passenger = new PassengerDetails("Test", "M", 35, "35A", "X");
		List<PassengerDetails> passengerDetails = new ArrayList<PassengerDetails>();
		passengerDetails.add(passenger);
		BookingInputModel bookingInput = new BookingInputModel(1100, 1, passengerDetails);
//		AuthenticateResponse tokenValid = new AuthenticateResponse("Admin", true, "token successfully validated");
//		ResponseEntity<AuthenticateResponse> authResponse = new ResponseEntity<AuthenticateResponse>(tokenValid,
//				HttpStatus.OK);
//		Ticket ticket = new Ticket(11110000, passenger);
//		List<Ticket> tickets = new ArrayList<Ticket>();
//		tickets.add(ticket);
//		when(authService.getAdminValidity("token")).thenReturn(authResponse);
//		when(bookingService.createBooking(bookingInput, "Test", "Test")).thenReturn(tickets);
		List<Ticket> result = bookingController.createBooking("token", bookingInput);

		assertNotNull(result);
	}
	
	@Test
	void testGetTicket() {
		
	}

}
